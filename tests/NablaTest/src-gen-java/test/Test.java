/* DO NOT EDIT THIS FILE - it is machine generated */

package test;

import java.io.FileReader;
import java.io.IOException;
import java.util.stream.IntStream;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonElement;

import fr.cea.nabla.javalib.*;
import fr.cea.nabla.javalib.mesh.*;

public final class Test
{
	public final static class Options
	{
		public double maxTime;
		public int maxIter;
		public double deltat;
		public String nonRegression;

		public void jsonInit(final String jsonContent)
		{
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(jsonContent, JsonObject.class);
			// maxTime
			if (o.has("maxTime"))
			{
				final JsonElement valueof_maxTime = o.get("maxTime");
				assert(valueof_maxTime.isJsonPrimitive());
				maxTime = valueof_maxTime.getAsJsonPrimitive().getAsDouble();
			}
			else
				maxTime = 0.1;
			// maxIter
			if (o.has("maxIter"))
			{
				final JsonElement valueof_maxIter = o.get("maxIter");
				assert(valueof_maxIter.isJsonPrimitive());
				maxIter = valueof_maxIter.getAsJsonPrimitive().getAsInt();
			}
			else
				maxIter = 500;
			// deltat
			if (o.has("deltat"))
			{
				final JsonElement valueof_deltat = o.get("deltat");
				assert(valueof_deltat.isJsonPrimitive());
				deltat = valueof_deltat.getAsJsonPrimitive().getAsDouble();
			}
			else
				deltat = 1.0;
		}
	}

	// Mesh and mesh variables
	private final CartesianMesh2D mesh;
	@SuppressWarnings("unused")
	private final int nbNodes, nbCells;

	// User options
	private final Options options;

	// Global variables
	protected int n;
	protected int k;
	protected double t_n;
	protected double t_nplus1;
	protected double t_n0;
	protected double[][] X;
	protected double[] e1;
	protected double[] e2_n;
	protected double[] e2_nplus1;
	protected double[] e2_nplus1_k;
	protected double[] e2_nplus1_kplus1;
	protected double[] e2_nplus1_k0;
	protected double[] e_n;
	protected double[] e_nplus1;
	protected double[] e_n0;
	protected double[] v;
	protected double[][] M;

	public Test(CartesianMesh2D aMesh, Options aOptions)
	{
		// Mesh and mesh variables initialization
		mesh = aMesh;
		nbNodes = mesh.getNbNodes();
		nbCells = mesh.getNbCells();

		// User options
		options = aOptions;

		// Initialize variables with default values

		// Allocate arrays
		X = new double[nbNodes][2];
		e1 = new double[nbCells];
		e2_n = new double[nbCells];
		e2_nplus1 = new double[nbCells];
		e2_nplus1_k = new double[nbCells];
		e2_nplus1_kplus1 = new double[nbCells];
		e2_nplus1_k0 = new double[nbCells];
		e_n = new double[nbCells];
		e_nplus1 = new double[nbCells];
		e_n0 = new double[nbCells];
		v = new double[nbCells];
		M = new double[nbCells][nbCells];

		// Copy node coordinates
		double[][] gNodes = mesh.getGeometry().getNodes();
		IntStream.range(0, nbNodes).parallel().forEach(rNodes ->
		{
			X[rNodes][0] = gNodes[rNodes][0];
			X[rNodes][1] = gNodes[rNodes][1];
		});
	}

	/**
	 * Job computeE1 called @1.0 in executeTimeLoopN method.
	 * In variables: e_n
	 * Out variables: e1
	 */
	protected void computeE1()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			e1[cCells] = e_n[cCells] + 3.0;
		});
	}

	/**
	 * Job computeE2 called @1.0 in executeTimeLoopK method.
	 * In variables: e2_nplus1_k
	 * Out variables: e2_nplus1_kplus1
	 */
	protected void computeE2()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			e2_nplus1_kplus1[cCells] = e2_nplus1_k[cCells] + 0.4;
		});
	}

	/**
	 * Job initE called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: e_n0
	 */
	protected void initE()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			e_n0[cCells] = 0.0;
		});
	}

	/**
	 * Job initTime called @1.0 in simulate method.
	 * In variables: 
	 * Out variables: t_n0
	 */
	protected void initTime()
	{
		t_n0 = 0.0;
	}

	/**
	 * Job updateT called @1.0 in executeTimeLoopN method.
	 * In variables: deltat, t_n
	 * Out variables: t_nplus1
	 */
	protected void updateT()
	{
		t_nplus1 = t_n + options.deltat;
	}

	/**
	 * Job initE2 called @2.0 in executeTimeLoopN method.
	 * In variables: e1
	 * Out variables: e2_nplus1_k0
	 */
	protected void initE2()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			e2_nplus1_k0[cCells] = e1[cCells];
		});
	}

	/**
	 * Job setUpTimeLoopN called @2.0 in simulate method.
	 * In variables: e_n0, t_n0
	 * Out variables: e_n, t_n
	 */
	protected void setUpTimeLoopN()
	{
		t_n = t_n0;
		IntStream.range(0, nbCells).parallel().forEach(i1Cells -> 
		{
			e_n[i1Cells] = e_n0[i1Cells];
		});
	}

	/**
	 * Job executeTimeLoopN called @3.0 in simulate method.
	 * In variables: e2_n, e_n, t_n
	 * Out variables: e2_nplus1, e_nplus1, t_nplus1
	 */
	protected void executeTimeLoopN()
	{
		n = 0;
		boolean continueLoop = true;
		do
		{
			n++;
			System.out.printf("START ITERATION n: %5d - t: %5.5f - deltat: %5.5f\n", n, t_n, options.deltat);
		
			computeE1(); // @1.0
			updateT(); // @1.0
			initE2(); // @2.0
			setUpTimeLoopK(); // @3.0
			executeTimeLoopK(); // @4.0
			tearDownTimeLoopK(); // @5.0
			updateE(); // @6.0
		
			// Evaluate loop condition with variables at time n
			continueLoop = (n + 1 < options.maxIter && t_nplus1 < options.maxTime);
		
			t_n = t_nplus1;
			IntStream.range(0, nbCells).parallel().forEach(i1Cells -> 
			{
				e2_n[i1Cells] = e2_nplus1[i1Cells];
			});
			IntStream.range(0, nbCells).parallel().forEach(i1Cells -> 
			{
				e_n[i1Cells] = e_nplus1[i1Cells];
			});
		} while (continueLoop);
		
		System.out.printf("FINAL TIME: %5.5f - deltat: %5.5f\n", t_n, options.deltat);
	}

	/**
	 * Job setUpTimeLoopK called @3.0 in executeTimeLoopN method.
	 * In variables: e2_nplus1_k0
	 * Out variables: e2_nplus1_k
	 */
	protected void setUpTimeLoopK()
	{
		IntStream.range(0, nbCells).parallel().forEach(i1Cells -> 
		{
			e2_nplus1_k[i1Cells] = e2_nplus1_k0[i1Cells];
		});
	}

	/**
	 * Job executeTimeLoopK called @4.0 in executeTimeLoopN method.
	 * In variables: e2_nplus1_k
	 * Out variables: e2_nplus1_kplus1
	 */
	protected void executeTimeLoopK()
	{
		k = 0;
		boolean continueLoop = true;
		do
		{
			k++;
			System.out.printf("Start iteration k: %5d\n", k);
		
			computeE2(); // @1.0
		
			// Evaluate loop condition with variables at time n
			continueLoop = (k + 1 < 10);
		
			IntStream.range(0, nbCells).parallel().forEach(i1Cells -> 
			{
				e2_nplus1_k[i1Cells] = e2_nplus1_kplus1[i1Cells];
			});
		} while (continueLoop);
	}

	/**
	 * Job tearDownTimeLoopK called @5.0 in executeTimeLoopN method.
	 * In variables: e2_nplus1_kplus1
	 * Out variables: e2_nplus1
	 */
	protected void tearDownTimeLoopK()
	{
		IntStream.range(0, nbCells).parallel().forEach(i1Cells -> 
		{
			e2_nplus1[i1Cells] = e2_nplus1_kplus1[i1Cells];
		});
	}

	/**
	 * Job updateE called @6.0 in executeTimeLoopN method.
	 * In variables: e2_nplus1
	 * Out variables: e_nplus1
	 */
	protected void updateE()
	{
		IntStream.range(0, nbCells).parallel().forEach(cCells -> 
		{
			e_nplus1[cCells] = e2_nplus1[cCells] - 3;
		});
	}

	public void simulate()
	{
		System.out.println("Start execution of test");
		initE(); // @1.0
		initTime(); // @1.0
		setUpTimeLoopN(); // @2.0
		executeTimeLoopN(); // @3.0
		System.out.println("End of execution of test");
	}

	public static void main(String[] args) throws IOException
	{
		if (args.length == 1)
		{
			final String dataFileName = args[0];
			final Gson gson = new Gson();
			final JsonObject o = gson.fromJson(new FileReader(dataFileName), JsonObject.class);

			// Mesh instanciation
			assert(o.has("mesh"));
			CartesianMesh2D mesh = new CartesianMesh2D();
			mesh.jsonInit(o.get("mesh").toString());

			// Module instanciation(s)
			Test.Options testOptions = new Test.Options();
			if (o.has("test")) testOptions.jsonInit(o.get("test").toString());
			Test test = new Test(mesh, testOptions);

			// Start simulation
			test.simulate();
		}
		else
		{
			System.err.println("[ERROR] Wrong number of arguments: expected 1, actual " + args.length);
			System.err.println("        Expecting user data file name, for example Test.json");
			System.exit(1);
		}
	}
};
